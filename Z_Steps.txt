1]  Create a Next JS app with shadcn
2] Setup global settings, tailwind config , layout.tsx for app folder that contains all the fonts,styles,colours


                                                 /* Route Groups */
   As we know File System based routing is done in Next.JS
   And we gonna use diff layouts for diff kinda pages hence we need route groups
   In the app directory, nested folders are normally mapped to URL paths.
   However, you can mark a folder as a Route Group to prevent the folder from being included in the route's URL path.
   

3] create a (root) folder to create a route group in app dir
   Within that make page.tsx & and 
   layout.tsx   --> This layout will contain the Sidebar and remaining children components and also nothing related to 

4] Similarly (auth) folder that will have its own layout.tsx  --> This wont have sidebar as we dont need it for signup/login

*** Now we have got a main layout.tsx in app dir which has all the texts,fonts,colours for everything
    We got Seperate layouts for main pages & Signup pages that have or dont have specific components

5]  Create sign-up & sign-in folders within auth and within them create their own page.tsx

*** So how our url works now is http://localhost:3000/sign-in or http://localhost:3000/sign-up 
    & NOT http://localhost:3000/auth/sign-in is because of the route group we used while creating (auth) folder
    hence its not included in path url

                    ***** Implemented File & Folder Structure  *****



6] Now we create a HeaderBox.tsx in components folder & update the page.tsx of root to get thiNavBox as a component there as paNav to this component to use it

7] NNaveate new component TotalBalanceBox.tsx

   While showing the account Balance in terms of Indian Ruppes we used a utils.ts file which needs query-string package 
   so download it for query params needed later on 

   
   ### So to show special effect while displaying balance we use <<< react-countup >>> package so just npm i it

  But now as we use it in TotalBalanceBox.tsx we get this 
  !!! RUNTIME error !!!
  Error: useRef only works in Client Components. Add the "use client" directive at the top of the file to use it. 
  Read more: https://nextjs.org/docs/messages/react-clienNavn-server-component

  Sometimes external packages use client side functionalities whithin themselves 
  & as our all components in NEXT.js ie in this file are server side by deafult, until we specify them to be client
  Therefore this conflict arises

  So just creatNavseperate component foNavnimation component

  Similarly

  ### We gonna need Charts
8] We npm i chartjs and react-chartjs-2 Navte a new component DoughnutChart.tsx 
   and stNavting the component while adding it in our (root) page.tsx

                                    /* Added 4 new Components */

10]  now we gonna add Side bar to root page --> so we go to (root)-> layout.tsx && simultaneously Nav Sidebar component
     After we crNav sidebar component and add it to out layout.tsx
     In the nav section we also put sidebarLinks which is in constants folder
     and we map them with diff links of their own

     Now as we are on the home page the color of home page Link should be different hence for this we use a hook called
     < cn() > which comes from lib/utils (inbuilt) for selectively giving className within mapped Links

     const pathname = usePathname(); we use this hook to get the current pathname so as to get a coniditon for cn()


     /* Basically whenevr we are using hooks or Routes it becomNavent side component so use
        "use client" on the top of the page to make Navent side component
     */

     Now we done with DEsktop sidebar & we gonna move to Mobile Sidebar

11] Create a MobileNav component and add it to layout.tsx
    Whithin MobileNav we gonna use shadcn's sheet
    so just npx shadcn-ui@latest add sheet

    By using this whenever the we is viewed on mobile or minimized the logo goes up and we get a button from "sheet"
    On clicking we can get the sidebar open 
    And by using SheetClose we close the sidebar whenever we click on a link

12] Now we create the right sidebar which wont be in the layout of the root coz its not visible on any other pages
    So we put it in the page.tsx of the root itself

13] Within the right sidebar we gonna need a Bank Card to display so create BankCard.tsx in component

                  Now we are done we right Sidebar too

14] Now we gotta route the links in left sidebar
    So just go to Sidebar.tsx and goto section where we mapped sidebarLinks which will lead us to index.ts in constants folder
    Here we can see how we wanna map them 
    So just create folders within roots to do the routing
    Within root create my-banks folder then within it do page.tsx and similarly for others

                                    /* Done with Root-Page */

15] We begin with (auth) pages now
    As we need to use same form in both sin-up & sign-in we create a new component called AuthForm
    and call this component in sign-in & sign-up both and 
    pass a type="sign-in" or "sign-up" to differentiate between them in AuthForm

16] Now we create a form with Shadcn  form

    As we need multiple input fileds for the form I am creating a seperate inputField component

    Now as we need the formSchema we used in AuthForm in this CustominputField too so we just 
    Cut it from there and add it to our utils with the name AuthFormSchema

    For the loading screen between form submit & form actions after submission we use Loader from Lucid-reacts

17] As we have added more input fields for Signup form 
    We have to update it in utils too for zod but what happens is if we just add all the fields in AuthFormSchema
    Even when we are tryna signin zod will try to check for all the fields in signup too
    So we use pass a type in AuthFormSchema so that we can conditionally mention the fields there

    Now we have to update the AuthFormSchema we mentioned in AuthForm.tsx and make it a fucntion to pass the type
    const formSchema = AuthFormSchema(type);
    & now pass this formSchema wherever we have used it B4

    Similarly     const formSchema = AuthFormSchema('sign-up');
    in CustomInputField.tsx and replace ...

                    /* We are done with Form Interface and validating that correct data is enetered with zod */

18] Now we move onto what happens onSubmit in Authform

19] Now we need Server actions for signin & signup
    Server Actions are asynchronous functions that are executed on the server.
    They can be used in Server and Client Components to handle form submissions and data mutations in Next.js applications

    create a actions folder within lib

20] Now we gonna need to actually aithenticate using appwrite
    So just goto appwrite and create a project there and get the id
    and create .env file as post evrything there 
    Once done with appwrite,its collections & attributes

21] Server-side Auth is the next step
    Create a new file called appwrite.ts in lib & copy file from nextjs-ssr-auth page in their docs
    and install all the packages we need in that file 
    and modify based on our requirements

22]  Next step is to get the logged in user so just goto user.actions.ts fie we created & 
     copy the function from docs there & modify acc to our specs 

23] Then copy of part of signup code from the next step of doc && then paste it in our reviously created user.actions
    modfiy it acc to our specs

    Now we are Done with signup function
    Now goto AuthForm to use this funcs we created & check if the function works on our website

24] Now as our Signup works correctly we gonna get the loggedIn user data
    so goto Signup page in (auth) & call this func

    Ok now remove this func once we have checked if it works

25] Now start the sign-in func ---> goto user.actions.ts create complete the signin func and goto Authform to Call this func 
    Now we are done with it too

26] Now we create a logout button in actions.ts


27]  Now we gonna create a new component called Footer.tsx which will contain our logout button
    which will be called in Sidebar & Mobile-nav
    Also update the dummy loggedIn data in root layout with real data we get from previously created 
    getloggedInuser()



                                                /******************/
  //If we use router we need to make the comp client side but swe dont wanna do that so.. use redirect() from next-nav
  // const router = useRouter();
  // const loggedInUser = await getLoggedInUser();
  // if(!loggedInUser) router.push('/sign-in')

  const loggedInUser = await getLoggedInUser();
  if(!loggedInUser) redirect('/sign-in')

                                        /* Done with Auth */

28] Now we create sentry acc and npx @sentry/wizard@latest -i nextjs
    Now we get all the sentry files
    check the sentry example page
    then delete it & global errors
    With sentry we can how the user got an error on our website

29] Now we gotta start with Plaid
    Plaid acts as a Middle Man between our App & Banks securing the sensitive data so we dont have to

    Get all the keys in .env & npm i react-plaid-link plaid
    create plaid.ts in lib to configure plaid Client which can be used to make API calls to plaid

30] Now goto Authform where we left space for plaid link & actually create a new component PlaidLink.tsx to put there
    Now in PlaidLink comp we need 2 new actions so goto user.actions.ts to create 2 new actions 
    1 to create plaidLink & other to exchange public token

    //* Working of Plaid tokens & links *//
    A token is required to initialize our PlaidLink client component
    1] We create a Link token
    2] Pass generated link token to plaid link 
        THis starts process of connecting Bank acc through plaid link 
    3] Plaid Link provides temp Public token which will be exchanged for Permanent acess token
    4] Exchange access token to get Bank details
    5] Now we a processor token for our payment processor named Dwolla

31] Now create dwolla.actions.ts in actions folder for Dwolla -->This is the copy-paste code which was given to us by dwolla
    Coz its a opensource software->Its meant to be used that way

    /* Plaid was to get data needed fro Transaction & Dwolla is a Transaction  which uses that data to do Transaction */

32] Now goto user.actions.ts to create a createBankAccounts server action for exchangeToken action

33] Now we have to create a schema for Bank Accounts too in Appwrite so goto Appwrite web & create Bank schema

34] Now goto SignUp action in user.actions to add the new System of 
    Creating User account with 
    1] User entered data
    2] Appwrite DatabaseID & url
    3] Dwolla Id & url
    Then updated the Signup func in AuthForm.tsx

35] Now create a dwolla sandbox acc
    get key & url key

    /* Done with Plaid & Dwolla */

36] Now goto Plaid and then under Developers --> Integrations --> Enable Dwolla
    This will enable us to authenticate users via dwolla on plaid

37] Now click on connect Bank after signing in then connect bank acc with 
    name:- user_good
    pass:- password_good

38] Now we are on home page  -->(root)/page.tsx
    So now we wanna fetch all the bank data on home page so create bank.actions
    and copy paste code from github

    And create 2 server actions for banks in user.actions

39] After getting this done we now focus on root page & add its components for transaction etc




    Figure out rest of the shit but in Payment Transfer form the process of payment transfer from 1 acc to another
    is to be looked at last along with transaction.actions.ts